// Dashboard State Management
let socket = null;
let isConnected = false;
let currentSessionId = null;
let uploadedFile = null;
let isConversationActive = false;

// DOM Elements
const uploadSection = document.getElementById('uploadSection');
const processingSection = document.getElementById('processingSection');
const conversationSection = document.getElementById('conversationSection');
const resultsSection = document.getElementById('resultsSection');
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');
const statusIndicator = document.getElementById('statusIndicator');
const voiceIndicator = document.getElementById('voiceIndicator');
const processingMessage = document.getElementById('processingMessage');
const progressFill = document.getElementById('progressFill');
const progressFillSmall = document.getElementById('progressFillSmall');
const progressText = document.getElementById('progressText');
const progressPercent = document.getElementById('progressPercent');
const aiMessage = document.getElementById('aiMessage');
const aiMessageText = document.getElementById('aiMessageText');
const userMessage = document.getElementById('userMessage');
const userMessageText = document.getElementById('userMessageText');
const conversationStatus = document.getElementById('conversationStatus');
const speechOverlay = document.getElementById('speechOverlay');
const speechText = document.getElementById('speechText');
const generatedImage = document.getElementById('generatedImage');
const downloadBtn = document.getElementById('downloadBtn');
const newFormBtn = document.getElementById('newFormBtn');

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    initializeWebSocket();
    initializeEventListeners();
});

// WebSocket Functions
function initializeWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.hostname}:5001`;
    
    socket = io(wsUrl);
    
    socket.on('connect', function() {
        console.log('Connected to Fill.ai backend');
        isConnected = true;
        updateStatus('ready', 'Ready');
    });
    
    socket.on('disconnect', function() {
        console.log('Disconnected from Fill.ai backend');
        isConnected = false;
        updateStatus('disconnected', 'Disconnected');
    });
    
    socket.on('connected', function(data) {
        console.log('Backend connected:', data.message);
    });
    
    socket.on('progress_update', function(data) {
        handleProgressUpdate(data);
    });
    
    socket.on('speech_text', function(data) {
        handleSpeechText(data);
    });
    
    socket.on('generated_image', function(data) {
        handleGeneratedImage(data);
    });
    
    socket.on('error', function(data) {
        handleError(data);
    });
    
    socket.on('processing_started', function(data) {
        console.log('Processing started:', data.message);
    });
    
    // Conversation event handlers
    socket.on('conversation_question', function(data) {
        handleConversationQuestion(data);
    });
    
    socket.on('conversation_answer', function(data) {
        handleConversationAnswer(data);
    });
    
    socket.on('conversation_complete', function(data) {
        handleConversationComplete(data);
    });
    
    // Voice event handlers
    socket.on('listening', function(data) {
        handleListening(data);
    });
    
    socket.on('user_speech', function(data) {
        handleUserSpeech(data);
    });
    
    socket.on('speech_timeout', function(data) {
        handleSpeechTimeout(data);
    });
    
    socket.on('speech_error', function(data) {
        handleSpeechError(data);
    });
}

function updateStatus(type, text) {
    statusIndicator.className = `status-indicator ${type}`;
    statusIndicator.querySelector('span').textContent = text;
}

// Progress and Speech Handling
function handleProgressUpdate(data) {
    console.log('Progress update:', data);
    
    if (data.step === 'starting') {
        showProcessingSection();
        updateStatus('processing', 'Processing');
    }
    
    updateProcessingMessage(data.message);
    
    if (data.progress !== null && data.progress !== undefined) {
        updateProgress(data.progress);
    }
    
    if (data.step === 'conversation') {
        showConversationSection();
        updateStatus('listening', 'Ready to Listen');
    }
    
    if (data.step === 'completed') {
        showResultsSection();
        updateStatus('ready', 'Completed');
    }
}

function handleSpeechText(data) {
    console.log('Speech text:', data);
    
    // Show speech overlay
    showSpeechOverlay(data.text);
    
    // Update conversation display
    updateAIMessage(data.text);
    
    // Update voice indicator
    voiceIndicator.className = 'voice-indicator speaking';
    voiceIndicator.querySelector('span').textContent = 'Speaking';
}

function handleGeneratedImage(data) {
    console.log('Generated image:', data);
    
    // Show the generated image
    generatedImage.src = `data:image/png;base64,${data.image}`;
    generatedImage.alt = data.description;
    
    // Show results section
    showResultsSection();
}

function handleError(data) {
    console.error('Error:', data);
    alert(`Error: ${data.message}`);
    showUploadSection();
    updateStatus('disconnected', 'Error');
}

// Conversation handling
function handleConversationQuestion(data) {
    console.log('Conversation question:', data);
    
    // Update conversation display
    updateAIMessage(data.question);
    
    // Update progress
    if (data.progress) {
        updateConversationProgress(data.progress);
    }
    
    // Update conversation status
    conversationStatus.textContent = 'AI is asking a question...';
}

function handleConversationAnswer(data) {
    console.log('Conversation answer:', data);
    
    // Show user's answer
    updateUserMessage(data.answer);
    
    // Show confirmation if confirmed
    if (data.confirmed) {
        setTimeout(() => {
            updateAIMessage(`Got it! ${data.field.label}: ${data.answer}`);
        }, 1000);
    }
}

function handleConversationComplete(data) {
    console.log('Conversation complete:', data);
    
    updateAIMessage(`Excellent! I've filled out ${data.filled_fields.length} fields. Now let me generate your completed form.`);
    conversationStatus.textContent = 'Generating your completed form...';
}

// Voice handling
function handleListening(data) {
    console.log('Listening for voice input:', data);
    
    voiceIndicator.className = 'voice-indicator listening';
    voiceIndicator.querySelector('span').textContent = 'Listening...';
    conversationStatus.textContent = 'Listening for your response...';
}

function handleUserSpeech(data) {
    console.log('User speech detected:', data);
    
    // Show what the user said
    updateUserMessage(data.text);
    
    // Reset voice indicator
    voiceIndicator.className = 'voice-indicator';
    voiceIndicator.querySelector('span').textContent = 'Ready';
}

function handleSpeechTimeout(data) {
    console.log('Speech timeout:', data);
    updateAIMessage("No speech detected. Please try again.");
    voiceIndicator.className = 'voice-indicator';
    voiceIndicator.querySelector('span').textContent = 'Ready';
}

function handleSpeechError(data) {
    console.log('Speech error:', data);
    updateAIMessage(`Error: ${data.message}`);
    voiceIndicator.className = 'voice-indicator';
    voiceIndicator.querySelector('span').textContent = 'Ready';
}

// UI Functions
function showUploadSection() {
    uploadSection.style.display = 'block';
    processingSection.style.display = 'none';
    conversationSection.style.display = 'none';
    resultsSection.style.display = 'none';
}

function showProcessingSection() {
    uploadSection.style.display = 'none';
    processingSection.style.display = 'block';
    conversationSection.style.display = 'none';
    resultsSection.style.display = 'none';
}

function showConversationSection() {
    uploadSection.style.display = 'none';
    processingSection.style.display = 'none';
    conversationSection.style.display = 'block';
    resultsSection.style.display = 'none';
    isConversationActive = true;
}

function showResultsSection() {
    uploadSection.style.display = 'none';
    processingSection.style.display = 'none';
    conversationSection.style.display = 'none';
    resultsSection.style.display = 'block';
    isConversationActive = false;
}

function updateProcessingMessage(message) {
    processingMessage.textContent = message;
}

function updateProgress(progress) {
    progressFill.style.width = `${progress}%`;
    if (progressFillSmall) {
        progressFillSmall.style.width = `${progress}%`;
    }
}

function updateConversationProgress(progress) {
    progressText.textContent = `Question ${progress.current} of ${progress.total}`;
    const percent = Math.round((progress.current / progress.total) * 100);
    progressPercent.textContent = `${percent}%`;
    progressFillSmall.style.width = `${percent}%`;
}

function updateAIMessage(text) {
    aiMessageText.textContent = text;
    aiMessage.style.display = 'flex';
    userMessage.style.display = 'none';
}

function updateUserMessage(text) {
    userMessageText.textContent = text;
    userMessage.style.display = 'flex';
}

function showSpeechOverlay(text) {
    speechText.textContent = text;
    speechOverlay.style.display = 'block';
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        speechOverlay.style.display = 'none';
    }, 5000);
}

// Event Listeners
function initializeEventListeners() {
    // File upload
    uploadArea.addEventListener('click', () => {
        fileInput.click();
    });

    uploadArea.addEventListener('dragover', handleDragOver);
    uploadArea.addEventListener('dragleave', handleDragLeave);
    uploadArea.addEventListener('drop', handleDrop);

    fileInput.addEventListener('change', handleFileSelect);

    // Results actions
    downloadBtn.addEventListener('click', downloadGeneratedImage);
    newFormBtn.addEventListener('click', startNewForm);
}

// File Upload Functions
function handleDragOver(e) {
    e.preventDefault();
    uploadArea.classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
        handleFile(files[0]);
    }
}

function handleFileSelect(e) {
    const file = e.target.files[0];
    if (file) {
        handleFile(file);
    }
}

function handleFile(file) {
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
    
    if (!allowedTypes.includes(file.type)) {
        alert('Please upload a PDF, JPEG, or PNG file.');
        return;
    }

    uploadedFile = file;
    
    // Upload file to backend
    uploadFileToBackend(file);
}

async function uploadFileToBackend(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    try {
        const response = await fetch('http://localhost:5001/upload', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.file_path) {
            // Update upload area
            uploadArea.innerHTML = `
                <div class="upload-icon">
                    <i class="fas fa-file-pdf" style="color: #ef4444;"></i>
                </div>
                <h3>${file.name}</h3>
                <p>Ready to process</p>
            `;
            
            // Start processing
            startProcessing(result.file_path);
        } else {
            throw new Error(result.error || 'Upload failed');
        }
    } catch (error) {
        console.error('Upload error:', error);
        alert('Failed to upload file. Please try again.');
    }
}

function startProcessing(filePath) {
    if (!isConnected) {
        alert('Not connected to backend. Please try again.');
        return;
    }
    
    // Start processing via WebSocket
    socket.emit('start_processing', {
        file_path: filePath,
        session_id: currentSessionId
    });
}

function downloadGeneratedImage() {
    const link = document.createElement('a');
    link.href = generatedImage.src;
    link.download = 'filled-form.png';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function startNewForm() {
    // Reset everything
    uploadedFile = null;
    fileInput.value = '';
    isConversationActive = false;
    
    // Reset upload area
    uploadArea.innerHTML = `
        <div class="upload-icon">
            <i class="fas fa-cloud-upload-alt"></i>
        </div>
        <h3>Drop your file here</h3>
        <p>or <span class="upload-link">browse files</span></p>
    `;
    
    // Show upload section
    showUploadSection();
    updateStatus('ready', 'Ready');
}

// Utility Functions
function generateSessionId() {
    return 'session_' + Math.random().toString(36).substr(2, 9);
}

// Initialize session ID
currentSessionId = generateSessionId();

// Fix the generated image handling
function handleGeneratedImage(data) {
    console.log('Generated image:', data);
    
    // Check if we have image data
    if (data.image) {
        // Show the generated image
        generatedImage.src = `data:image/png;base64,${data.image}`;
        generatedImage.alt = data.description || 'Generated form';
        
        // Show results section
        showResultsSection();
        
        // Enable download button
        downloadBtn.disabled = false;
        
        console.log('✅ Image loaded successfully');
    } else if (data.image_path) {
        // If we have a file path, we need to fetch it
        fetchGeneratedImage(data.image_path);
    } else {
        console.error('No image data provided');
        alert('Error: No image data received');
    }
}

async function fetchGeneratedImage(imagePath) {
    try {
        console.log('Fetching image from:', imagePath);
        
        // Convert the image to base64
        const response = await fetch(`http://localhost:5001/get_image?path=${encodeURIComponent(imagePath)}`);
        
        if (response.ok) {
            const blob = await response.blob();
            const reader = new FileReader();
            reader.onload = function() {
                const base64 = reader.result.split(',')[1];
                generatedImage.src = `data:image/png;base64,${base64}`;
                generatedImage.alt = 'Generated form';
                showResultsSection();
                downloadBtn.disabled = false;
                console.log('✅ Image fetched and loaded successfully');
            };
            reader.readAsDataURL(blob);
        } else {
            throw new Error('Failed to fetch image');
        }
    } catch (error) {
        console.error('Error fetching image:', error);
        alert('Error loading generated image. Please try again.');
    }
}

// Update the download function
function downloadGeneratedImage() {
    if (generatedImage.src && generatedImage.src !== '') {
        const link = document.createElement('a');
        link.href = generatedImage.src;
        link.download = 'filled-form.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        console.log('✅ Download started');
    } else {
        alert('No image available to download');
    }
}

// Add image load error handling
generatedImage.addEventListener('error', function() {
    console.error('Failed to load generated image');
    alert('Failed to load the generated image. Please try again.');
});

// Update the showResultsSection function
function showResultsSection() {
    uploadSection.style.display = 'none';
    processingSection.style.display = 'none';
    conversationSection.style.display = 'none';
    resultsSection.style.display = 'block';
    isConversationActive = false;
    
    // Ensure the image is visible
    if (generatedImage.src && generatedImage.src !== '') {
        generatedImage.style.display = 'block';
    }
}
